{"version":3,"sources":["components/Spinner.js","components/WeatherData.js","components/Season.js","components/App.js","index.js"],"names":["centerContents","display","flexDirection","justifyContent","alignItems","color","backgroundColor","height","Spinner","props","style","message","className","WeatherData","data","key","weatherData","push","alt","src","console","log","class","month","Date","getMonth","monthString","toLocaleString","seasons","summer","name","icon","winter","displayPage","lat","error","wData","season","displaySeason","Season","App","getWeatherData","long","req","XMLHttpRequest","weather","open","process","send","onload","JSON","parse","responseText","clouds","all","description","sys","country","main","feels_like","temp","humidity","temp_min","temp_max","city","feelsLike","temperature","maxTemp","minTemp","setState","componentDidMount","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","state","this","React","Component","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.575852ac.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const centerContents = { \r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    color: 'white',\r\n    backgroundColor: 'black', \r\n    height: '100vh'\r\n}\r\n\r\nconst Spinner = (props) => {\r\n    return(\r\n        <div style={centerContents}>\r\n            <h1>{props.message}</h1>\r\n            <i className=\"spinner loading massive icon\"></i>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport './WeatherData.css'\r\n\r\nconst WeatherData = (props) => {\r\n    let data = [];\r\n    for(let key in props.weatherData){\r\n        if(key === \"icon\"){\r\n         data.push( <img  alt=\"icon\" src={props.weatherData[key]}/>);\r\n        }else{\r\n         data.push(<p>{key}: {props.weatherData[key]}</p>);\r\n        }\r\n       \r\n    } \r\n    console.log(props.weatherData);\r\n    return(\r\n        <div class=\"weatherData\">\r\n          {data}\r\n        </div>\r\n    );\r\n}\r\nexport default WeatherData;","import React from 'react';\r\nimport './Season.css';\r\nimport Spinner from './Spinner';\r\nimport WeatherData from './WeatherData';\r\n\r\nlet month = (new Date()).getMonth();\r\nlet monthString = (new Date()).toLocaleString('default',{month: 'long'});\r\n\r\n\r\nconst seasons = {\r\n    summer: {name: 'summer', icon: 'sun', message: `It's ${monthString}...Let's go to the beach ich!!!`}, \r\n    winter: {name: 'winter', icon: 'snowflake', message: `Brrr it's Cold in ${monthString}!!!`}\r\n};\r\nconst {summer, winter} = seasons;\r\n\r\nconst displaySeason = (lat) =>{\r\n    \r\n    if(lat>0){\r\n     return ((month>4) && (month<9))? summer : winter;\r\n    }\r\n    return ((month>4) && (month<9))? winter: summer;\r\n }\r\n\r\n const displayPage = (lat, error, wData) =>{\r\n   \r\n    if(lat === null && error === ''){\r\n        return (<Spinner message=\"Please enable your location...\" />);\r\n    }\r\n    if(lat !== null){\r\n     let season = displaySeason(lat);\r\n     return (\r\n       <div className={`${season.name} main` }>\r\n         <i className={`${season.icon}  icon massive left-icon`}></i>\r\n         <WeatherData weatherData = {wData}  />\r\n         <h1>{season.message}</h1>\r\n         <i className={`${season.icon}  icon big right-icon`}></i>\r\n       </div>\r\n     );\r\n    }\r\n    if(error !== ''){\r\n     return (<div className=\"center-contents\">\r\n       <h1 style={{color: 'red'}}>Error: </h1>\r\n       <h1>{error}</h1>\r\n     </div>);\r\n    }\r\n   \r\n          \r\n }\r\n\r\nconst Season = ({lat, error, wData})=>{\r\n    \r\n        return (<div>{displayPage(lat, error, wData)}</div>);\r\n\r\n}\r\nexport default Season;","import React from 'react';\r\nimport Season from './Season';\r\n\r\nclass App extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state={lat: null, long: null, error: '', weatherData: {}};\r\n    }\r\n\r\n        getWeatherData = (lat, long) =>{\r\n        let req = new XMLHttpRequest();\r\n        let weather = {};\r\n        req.open(\"GET\", `http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&units=metric&appid=${process.env.REACT_APP_WEATHER_API_KEY}`);\r\n         req.send();\r\n         req.onload = () => {\r\n              const data =  JSON.parse(req.responseText);\r\n            \r\n             console.log(data);\r\n\r\n             console.log(`${data.clouds.all} ${data.weather[0].icon} ${data.weather[0].description} ${data.sys.country} ${data.name} feela like: ${data.main.feels_like} ${data.main.temp}degrees ${data.main.humidity} ${data.main.temp_min} ${data.main.temp_max}`);\r\n             weather = {\r\n                 icon: `http://openweathermap.org/img/w/${data.weather[0].icon}.png`,\r\n                 country: data.sys.country,\r\n                 city: data.name,\r\n                 clouds: data.clouds.all,\r\n                 description: data.weather[0].description,\r\n                 feelsLike: data.main.feels_like,\r\n                 temperature: data.main.temp + ' degree celcius',\r\n                 humidity: data.main.humidity ,\r\n                 maxTemp: data.main.temp_max + ' degrees celcius',\r\n                 minTemp: data.main.temp_min + ' degrees celcius',\r\n\r\n             };\r\n             this.setState({weatherData: weather});\r\n            }\r\n            \r\n\r\n            \r\n    }\r\n\r\n        componentDidMount= ()=>{\r\n        navigator.geolocation.getCurrentPosition(\r\n            (position)=>{\r\n                this.setState(\r\n                    {\r\n                    lat: position.coords.latitude, \r\n                    long:position.coords.longitude, \r\n                   }\r\n                   \r\n                );\r\n                const {lat, long} = this.state;\r\n                console.log(lat, long);\r\n                this.getWeatherData(lat, long);\r\n                \r\n        \r\n    }\r\n               \r\n            ,\r\n            (error)=>this.setState({error: error.message })\r\n            )\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Season error={this.state.error} wData={this.state.weatherData} lat={this.state.lat} />\r\n        );\r\n    }\r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}